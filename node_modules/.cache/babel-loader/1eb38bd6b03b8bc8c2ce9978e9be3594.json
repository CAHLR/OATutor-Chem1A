{"ast":null,"code":"import{variabilize}from'./variabilize.js';import insert from\"../util/strInsert\";import{parseMatrixTex}from\"../util/parseMatrixTex\";import{IS_DEVELOPMENT,IS_STAGING_OR_DEVELOPMENT}from\"../util/getBuildType\";import WrongAnswerReasons from\"../util/wrongAnswerReasons\";var KAS=require('../kas.js');if(IS_DEVELOPMENT){window.KAS=KAS;}// attempt = student answer, actual = [ans1, ans2]\nfunction _equality(attempt,actual){var parsedAttempt=attempt.replace(/\\s+/g,'').replace(/\\\\left/g,'').replace(/\\\\right/g,'');return actual.filter(function(stepAns){var parsedStepAns=stepAns.replace(/\\s+/g,'').replace(/\\\\left/g,'').replace(/\\\\right/g,'');//console.log(\"parsedAttempt: \" + parsedAttempt + \" parsedStepAns: \" + parsedStepAns);\nreturn parsedAttempt===parsedStepAns;});}// attempt = student answer, actual = [ans1, ans2]\n/**\n *\n * @param attempt {Expr}\n * @param actual {Expr[]}\n * @returns {Expr[]}\n * @private\n */function _parseEquality(attempt,actual){//console.log(\"PARSED: \" + attempt.print());\n//console.log(\"ANSWER: \" + actual[0].print());\nreturn actual.filter(function(stepAns){return KAS.compare(attempt,stepAns).equal;});}// Round to precision number of decimal places\nfunction round(num,precision){if(precision!=null){return Math.round(num*Math.pow(10,precision))/Math.pow(10,precision);}else{return num;}}/**\n * Uses parse\n * @param _string the expression string\n */function parse(_string){// explicitly group outermost absolute value pair with parenthesis to imply multiplication when neighboring constant\nif(_string.split(\"|\").length===3){var leftIdx=_string.indexOf(\"\\\\left|\");if(leftIdx>-1){var rightIdx=_string.lastIndexOf(\"\\\\right|\");_string=insert(_string,leftIdx,\"(\");_string=insert(_string,rightIdx+8,\")\");}else{var leftBarIdx=_string.indexOf(\"|\");var rightBarIdx=_string.lastIndexOf(\"|\");_string=insert(_string,leftBarIdx,\"(\");_string=insert(_string,rightBarIdx+2,\")\");}}var string=_string.replace(/\\$\\$/g,'');// replace $$ as KAS can parse LaTex but without the $$ prepended/appended\nreturn KAS.parse(string);}function validateAndCorrectFormat(input){var fraction=/\\\\frac(\\d)(\\d)/g;var correctedInputFraction=input.replace(fraction,function(match,numerator,denominator){return\"\\\\frac{\".concat(numerator,\"}{\").concat(denominator,\"}\");});var sqrt=/\\\\sqrt(\\d)/g;var correctedInput=correctedInputFraction.replace(sqrt,function(match,number){return\"\\\\sqrt{\".concat(number,\"}\");});return correctedInput;}function convertSwedishToUS(numberString){var noSpaces=numberString.replace(/\\s/g,'');var formattedNumber=noSpaces.replace(/(?<=\\d),(?=\\d)/g,'.');return formattedNumber;}/**\n *\n * @param attempt\n * @param actual\n * @param answerType\n * @param precision\n * @param variabilization\n * @param questionText {string} allows for a check to see if student pasted in the answer exactly\n * @returns {[string, boolean | string, null | WrongAnswerReasons]}\n */function checkAnswer(_ref){var attempt=_ref.attempt,actual=_ref.actual,answerType=_ref.answerType,_ref$precision=_ref.precision,precision=_ref$precision===void 0?400:_ref$precision,_ref$variabilization=_ref.variabilization,variabilization=_ref$variabilization===void 0?{}:_ref$variabilization,_ref$questionText=_ref.questionText,questionText=_ref$questionText===void 0?\"\":_ref$questionText,_ref$tolerance=_ref.tolerance,tolerance=_ref$tolerance===void 0?0:_ref$tolerance;var parsed=attempt.replace(/\\s+/g,'');if(variabilization){actual=actual.map(function(actualAns){return variabilize(actualAns,variabilization);});}try{if(parsed===\"\"){return[parsed,false,WrongAnswerReasons.wrong];}if(answerType===\"arithmetic\"){// checks if anticipated answer is a matrix\nif(/\\\\begin{[a-zA-Z]?matrix}/.test(actual)){console.debug(\"attempt: \".concat(attempt,\" vs. actual:\"),actual);var studentMatrix=JSON.parse(attempt);var solutionMatrices=parseMatrixTex(actual);console.debug('solutions: ',solutionMatrices);var correctAnswers=solutionMatrices.filter(function(matrix){return matrix.reduce(function(acc,row,idx){return acc&&row.reduce(function(_acc,cell,jdx){var _studentRow=studentMatrix[idx]||[];var _studentCell=_studentRow[jdx]||\"\";var _studentExpr=parse(_studentCell).expr;var _solExpr=parse(cell).expr;return _acc&&KAS.compare(_studentExpr,_solExpr).equal;},true);},true);});if(correctAnswers.length>0){return[attempt,correctAnswers[0],null];}return[attempt,false,WrongAnswerReasons.wrong];}else{// Validate and parse student attempt\nattempt=validateAndCorrectFormat(attempt);var parsedAttemptExpr;var parseAttemptError=false;try{parsedAttemptExpr=parse(attempt).expr;}catch(err){parseAttemptError=true;}if(IS_STAGING_OR_DEVELOPMENT){console.debug(\"checkAnswer.js: Using KAS to compare answer with solution\",\"attempt\",attempt,\"actual\",actual);console.debug(\"checkAnswer.js: questionText vs attempt\",questionText,\"vs\",attempt);}// try to see if student pasted in exact question\ntry{var _parsedAttemptExpr,_parsedAttemptExpr$re;var questionTextRepr=parse(questionText).expr.repr();if(questionTextRepr===((_parsedAttemptExpr=parsedAttemptExpr)===null||_parsedAttemptExpr===void 0?void 0:(_parsedAttemptExpr$re=_parsedAttemptExpr.repr)===null||_parsedAttemptExpr$re===void 0?void 0:_parsedAttemptExpr$re.call(_parsedAttemptExpr))){return[attempt,false,WrongAnswerReasons.sameAsProblem];}}catch(_){// ignored\n}if(parseAttemptError||!parsedAttemptExpr){// Fallback: treat as string comparison\nvar _correctAnswers2=actual.filter(function(ans){return attempt.trim()===ans.trim();});if(_correctAnswers2.length>0){return[attempt,_correctAnswers2[0],null];}return[attempt,false,WrongAnswerReasons.wrong];}// Normal numeric comparison\nvar _correctAnswers=actual.filter(function(stepAns){var parsedStepAnsExpr;try{parsedStepAnsExpr=parse(stepAns).expr;}catch(err){return false;// Can't parse solution either\n}if(!parsedStepAnsExpr){return false;}var difference=Math.abs(parsedAttemptExpr.eval()-parsedStepAnsExpr.eval());return difference<=tolerance;});if(_correctAnswers.length>0){return[parsedAttemptExpr.print(),_correctAnswers[0],null];}return[parsedAttemptExpr.print(),false,WrongAnswerReasons.wrong];}}else if(answerType===\"string\"){parsed=attempt;//console.log(parsed);\n//console.log(actual);\nvar _correctAnswers3=_equality(parsed,actual);if(_correctAnswers3.length>0){return[parsed,_correctAnswers3[0],null];}return[parsed,false,WrongAnswerReasons.wrong];}else{// guess it is a number problem\nparsed=+attempt;var _correctAnswers4=actual.filter(function(actualAns){var difference=Math.abs(parsed-+actualAns);return difference<=tolerance;});if(_correctAnswers4.length>0){return[parsed,_correctAnswers4[0],null];}return[parsed,false,WrongAnswerReasons.wrong];}}catch(err){console.log(\"error\",err);return[parsed,false,WrongAnswerReasons.errored];}}export{checkAnswer};","map":{"version":3,"names":["variabilize","insert","parseMatrixTex","IS_DEVELOPMENT","IS_STAGING_OR_DEVELOPMENT","WrongAnswerReasons","KAS","require","window","_equality","attempt","actual","parsedAttempt","replace","filter","stepAns","parsedStepAns","_parseEquality","compare","equal","round","num","precision","Math","pow","parse","_string","split","length","leftIdx","indexOf","rightIdx","lastIndexOf","leftBarIdx","rightBarIdx","string","validateAndCorrectFormat","input","fraction","correctedInputFraction","match","numerator","denominator","sqrt","correctedInput","number","convertSwedishToUS","numberString","noSpaces","formattedNumber","checkAnswer","answerType","variabilization","questionText","tolerance","parsed","map","actualAns","wrong","test","console","debug","studentMatrix","JSON","solutionMatrices","correctAnswers","matrix","reduce","acc","row","idx","_acc","cell","jdx","_studentRow","_studentCell","_studentExpr","expr","_solExpr","parsedAttemptExpr","parseAttemptError","err","questionTextRepr","repr","sameAsProblem","_","ans","trim","parsedStepAnsExpr","difference","abs","eval","print","log","errored"],"sources":["/Users/songwang/allison/chem/OATutor-Chem1A/src/platform-logic/checkAnswer.js"],"sourcesContent":["import { variabilize } from './variabilize.js';\nimport insert from \"../util/strInsert\";\nimport { parseMatrixTex } from \"../util/parseMatrixTex\";\nimport { IS_DEVELOPMENT, IS_STAGING_OR_DEVELOPMENT } from \"../util/getBuildType\";\nimport WrongAnswerReasons from \"../util/wrongAnswerReasons\";\n\nconst KAS = require('../kas.js');\n\nif (IS_DEVELOPMENT) {\n    window.KAS = KAS\n}\n\n// attempt = student answer, actual = [ans1, ans2]\nfunction _equality(attempt, actual) {\n    const parsedAttempt = attempt.replace(/\\s+/g, '').replace(/\\\\left/g, '').replace(/\\\\right/g, '');\n    return actual.filter(stepAns => {\n        const parsedStepAns = stepAns.replace(/\\s+/g, '').replace(/\\\\left/g, '').replace(/\\\\right/g, '');\n        //console.log(\"parsedAttempt: \" + parsedAttempt + \" parsedStepAns: \" + parsedStepAns);\n        return parsedAttempt === parsedStepAns\n    });\n}\n\n// attempt = student answer, actual = [ans1, ans2]\n/**\n *\n * @param attempt {Expr}\n * @param actual {Expr[]}\n * @returns {Expr[]}\n * @private\n */\nfunction _parseEquality(attempt, actual) {\n    //console.log(\"PARSED: \" + attempt.print());\n    //console.log(\"ANSWER: \" + actual[0].print());\n    return actual.filter(stepAns => KAS.compare(attempt, stepAns).equal);\n}\n\n// Round to precision number of decimal places\nfunction round(num, precision) {\n    if (precision != null) {\n        return Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);\n    } else {\n        return num;\n    }\n}\n\n/**\n * Uses parse\n * @param _string the expression string\n */\nfunction parse(_string) {\n    // explicitly group outermost absolute value pair with parenthesis to imply multiplication when neighboring constant\n    if (_string.split(\"|\").length === 3) {\n        const leftIdx = _string.indexOf(\"\\\\left|\")\n        if (leftIdx > -1) {\n            const rightIdx = _string.lastIndexOf(\"\\\\right|\")\n            _string = insert(_string, leftIdx, \"(\")\n            _string = insert(_string, rightIdx + 8, \")\")\n        } else {\n            const leftBarIdx = _string.indexOf(\"|\")\n            const rightBarIdx = _string.lastIndexOf(\"|\")\n            _string = insert(_string, leftBarIdx, \"(\")\n            _string = insert(_string, rightBarIdx + 2, \")\")\n        }\n    }\n\n    const string = _string\n        .replace(/\\$\\$/g, '') // replace $$ as KAS can parse LaTex but without the $$ prepended/appended\n    return KAS.parse(string)\n}\n\nfunction validateAndCorrectFormat(input) {\n    const fraction = /\\\\frac(\\d)(\\d)/g;\n\n    const correctedInputFraction = input.replace(fraction, (match, numerator, denominator) => {\n        return `\\\\frac{${numerator}}{${denominator}}`;\n    });\n\n    const sqrt = /\\\\sqrt(\\d)/g;\n\n    const correctedInput = correctedInputFraction.replace(sqrt, (match, number) => {\n        return `\\\\sqrt{${number}}`;\n    });\n\n    return correctedInput;\n}\n\nfunction convertSwedishToUS(numberString) {\n    let noSpaces = numberString.replace(/\\s/g, '');\n    let formattedNumber = noSpaces.replace(/(?<=\\d),(?=\\d)/g, '.');\n    return formattedNumber;\n}\n\n/**\n *\n * @param attempt\n * @param actual\n * @param answerType\n * @param precision\n * @param variabilization\n * @param questionText {string} allows for a check to see if student pasted in the answer exactly\n * @returns {[string, boolean | string, null | WrongAnswerReasons]}\n */\nfunction checkAnswer({ attempt, actual, answerType, precision = 400, variabilization = {}, questionText = \"\", tolerance = 0}) {\n    let parsed = attempt.replace(/\\s+/g, '');\n    if (variabilization) {\n        actual = actual.map((actualAns) => variabilize(actualAns, variabilization));\n    }\n\n    try {\n        if (parsed === \"\") {\n            return [parsed, false, WrongAnswerReasons.wrong];\n        }\n        if (answerType === \"arithmetic\") {\n            // checks if anticipated answer is a matrix\n            if (/\\\\begin{[a-zA-Z]?matrix}/.test(actual)) {\n                console.debug(`attempt: ${attempt} vs. actual:`, actual)\n                const studentMatrix = JSON.parse(attempt)\n                const solutionMatrices = parseMatrixTex(actual);\n\n                console.debug('solutions: ', solutionMatrices)\n                let correctAnswers = solutionMatrices.filter(matrix => {\n                    return matrix.reduce((acc, row, idx) => acc && row.reduce((_acc, cell, jdx) => {\n                        const _studentRow = studentMatrix[idx] || []\n                        const _studentCell = _studentRow[jdx] || \"\"\n                        const _studentExpr = parse(_studentCell).expr\n\n                        const _solExpr = parse(cell).expr\n\n                        return _acc && KAS.compare(_studentExpr, _solExpr).equal\n                    }, true), true)\n                })\n\n                if (correctAnswers.length > 0) {\n                    return [attempt, correctAnswers[0], null]\n                }\n\n                return [attempt, false, WrongAnswerReasons.wrong]\n            } else {\n                // Validate and parse student attempt\n                attempt = validateAndCorrectFormat(attempt);\n\n                let parsedAttemptExpr;\n                let parseAttemptError = false;\n\n                try {\n                    parsedAttemptExpr = parse(attempt).expr;\n                } catch (err) {\n                    parseAttemptError = true;\n                }\n\n                if (IS_STAGING_OR_DEVELOPMENT) {\n                    console.debug(\"checkAnswer.js: Using KAS to compare answer with solution\", \"attempt\", attempt, \"actual\", actual);\n                    console.debug(\"checkAnswer.js: questionText vs attempt\", questionText, \"vs\", attempt);\n                }\n\n                // try to see if student pasted in exact question\n                try {\n                    const questionTextRepr = parse(questionText).expr.repr();\n                    if (questionTextRepr === parsedAttemptExpr?.repr?.()) {\n                        return [attempt, false, WrongAnswerReasons.sameAsProblem];\n                    }\n                } catch (_) {\n                    // ignored\n                }\n\n                if (parseAttemptError || !parsedAttemptExpr) {\n                    // Fallback: treat as string comparison\n                    const correctAnswers = actual.filter(ans => attempt.trim() === ans.trim());\n                    if (correctAnswers.length > 0) {\n                        return [attempt, correctAnswers[0], null];\n                    }\n                    return [attempt, false, WrongAnswerReasons.wrong];\n                }\n\n                // Normal numeric comparison\n                let correctAnswers = actual.filter(stepAns => {\n                    let parsedStepAnsExpr;\n                    try {\n                        parsedStepAnsExpr = parse(stepAns).expr;\n                    } catch (err) {\n                        return false; // Can't parse solution either\n                    }\n                    if (!parsedStepAnsExpr) {\n                        return false;\n                    }\n                    const difference = Math.abs(parsedAttemptExpr.eval() - parsedStepAnsExpr.eval());\n                    return difference <= tolerance;\n                });\n\n                if (correctAnswers.length > 0) {\n                    return [parsedAttemptExpr.print(), correctAnswers[0], null];\n                }\n\n                return [parsedAttemptExpr.print(), false, WrongAnswerReasons.wrong];\n            }\n\n        } else if (answerType === \"string\") {\n            parsed = attempt;\n            //console.log(parsed);\n            //console.log(actual);\n            const correctAnswers = _equality(parsed, actual);\n\n            if (correctAnswers.length > 0) {\n                return [parsed, correctAnswers[0], null]\n            }\n\n            return [parsed, false, WrongAnswerReasons.wrong];\n        } else {\n            // guess it is a number problem\n            parsed = +attempt;\n            const correctAnswers = actual.filter(actualAns => {\n                const difference = Math.abs(parsed - (+actualAns));\n                return difference <= tolerance;\n            });\n\n            if (correctAnswers.length > 0) {\n                return [parsed, correctAnswers[0], null]\n            }\n\n            return [parsed, false, WrongAnswerReasons.wrong];\n        }\n    } catch (err) {\n        console.log(\"error\", err);\n        return [parsed, false, WrongAnswerReasons.errored];\n    }\n}\n\nexport { checkAnswer };"],"mappings":"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"},"metadata":{},"sourceType":"module"}