{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/allisonwang/Downloads/chemistry/OATutor-Chem1A/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{MASTERY_THRESHOLD}from\"../../../config/config.js\";function heuristic(problems,completedProbs){var chosenProblem=[];var _iterator=_createForOfIteratorHelper(problems),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var problem=_step.value;// Already completed this problem or irrelevant (null if not in learning goals)\nif(completedProbs.has(problem.id)||problem.probMastery==null||problem.probMastery>=MASTERY_THRESHOLD){continue;}else if(chosenProblem.length===0||chosenProblem[0].probMastery>problem.probMastery){chosenProblem=[problem];}else if(chosenProblem.length>0&&chosenProblem[0].probMastery===problem.probMastery){chosenProblem.push(problem);}}// Choose random from problems with equal mastery\n}catch(err){_iterator.e(err);}finally{_iterator.f();}return chosenProblem[Math.floor(Math.random()*chosenProblem.length)];}export{heuristic};","map":{"version":3,"names":["MASTERY_THRESHOLD","heuristic","problems","completedProbs","chosenProblem","problem","has","id","probMastery","length","push","Math","floor","random"],"sources":["/Users/allisonwang/Downloads/chemistry/OATutor-Chem1A/src/models/BKT/problem-select-heuristics/defaultHeuristic.js"],"sourcesContent":["import {MASTERY_THRESHOLD} from \"../../../config/config.js\"\n\nfunction heuristic(problems, completedProbs) {\n\n  var chosenProblem = [];\n  for (var problem of problems) {\n    // Already completed this problem or irrelevant (null if not in learning goals)\n    if (completedProbs.has(problem.id) || problem.probMastery == null || problem.probMastery >= MASTERY_THRESHOLD) {\n      continue;\n    } else if (chosenProblem.length === 0 || chosenProblem[0].probMastery > problem.probMastery) {\n      chosenProblem = [problem];\n    } else if (chosenProblem.length > 0 && chosenProblem[0].probMastery === problem.probMastery) {\n      chosenProblem.push(problem);\n    }\n  }\n  // Choose random from problems with equal mastery\n  return chosenProblem[Math.floor(Math.random() * chosenProblem.length)];\n}\n\nexport { heuristic };\n"],"mappings":"mKAAA,OAAQA,iBAAR,KAAgC,2BAAhC,CAEA,QAASC,UAAT,CAAmBC,QAAnB,CAA6BC,cAA7B,CAA6C,CAE3C,GAAIC,cAAa,CAAG,EAApB,CAF2C,yCAGvBF,QAHuB,YAG3C,+CAA8B,IAArBG,QAAqB,aAC5B;AACA,GAAIF,cAAc,CAACG,GAAf,CAAmBD,OAAO,CAACE,EAA3B,GAAkCF,OAAO,CAACG,WAAR,EAAuB,IAAzD,EAAiEH,OAAO,CAACG,WAAR,EAAuBR,iBAA5F,CAA+G,CAC7G,SACD,CAFD,IAEO,IAAII,aAAa,CAACK,MAAd,GAAyB,CAAzB,EAA8BL,aAAa,CAAC,CAAD,CAAb,CAAiBI,WAAjB,CAA+BH,OAAO,CAACG,WAAzE,CAAsF,CAC3FJ,aAAa,CAAG,CAACC,OAAD,CAAhB,CACD,CAFM,IAEA,IAAID,aAAa,CAACK,MAAd,CAAuB,CAAvB,EAA4BL,aAAa,CAAC,CAAD,CAAb,CAAiBI,WAAjB,GAAiCH,OAAO,CAACG,WAAzE,CAAsF,CAC3FJ,aAAa,CAACM,IAAd,CAAmBL,OAAnB,EACD,CACF,CACD;AAb2C,qDAc3C,MAAOD,cAAa,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBT,aAAa,CAACK,MAAzC,CAAD,CAApB,CACD,CAED,OAASR,SAAT"},"metadata":{},"sourceType":"module"}