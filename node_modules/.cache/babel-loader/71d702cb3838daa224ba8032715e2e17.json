{"ast":null,"code":"import _slicedToArray from\"/Users/allisonwang/Downloads/chemistry/OATutor-Chem1A/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _classCallCheck from\"/Users/allisonwang/Downloads/chemistry/OATutor-Chem1A/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/allisonwang/Downloads/chemistry/OATutor-Chem1A/node_modules/@babel/runtime/helpers/esm/createClass.js\";/*\n * MIT License\n *\n * Copyright (c) 2020 Axel Rauschmayer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */ /**\n * Modified to use jsdoc and prevent source-map issues\n */export var Enumify=/*#__PURE__*/function(_Symbol$iterator){function Enumify(){_classCallCheck(this,Enumify);}_createClass(Enumify,[{key:\"toString\",value:function toString(){return this.constructor.name+'.'+this.enumKey;}}],[{key:\"closeEnum\",value://#################### Static\n/**\n     * @type Array<string>\n     */ /**\n     * @type {Array<Enumify>}\n     */function closeEnum(){/**\n         * @type {Array<string>}\n         */var enumKeys=[];/**\n         * @type {Array<Enumify>}\n         */var enumValues=[];// Traverse the enum entries\nfor(var _i=0,_Object$entries=Object.entries(this);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];enumKeys.push(key);value.enumKey=key;value.enumOrdinal=enumValues.length;enumValues.push(value);}// Important: only add more static properties *after* processing the enum entries\nthis.enumKeys=enumKeys;this.enumValues=enumValues;// TODO: prevent instantiation now. Freeze `this`?\n}/** Use case: parsing enum values\n     * @param {string} str\n     * @return { undefined | Enumify }\n     */},{key:\"enumValueOf\",value:function enumValueOf(str){var index=this.enumKeys.indexOf(str);if(index>=0){return this.enumValues[index];}return undefined;}},{key:_Symbol$iterator,value:function value(){return this.enumValues[Symbol.iterator]();}//#################### Instance\n/**\n     * @type {string}\n     */}]);return Enumify;}(Symbol.iterator);","map":{"version":3,"names":["Enumify","constructor","name","enumKey","enumKeys","enumValues","Object","entries","key","value","push","enumOrdinal","length","str","index","indexOf","undefined","Symbol","iterator"],"sources":["/Users/allisonwang/Downloads/chemistry/OATutor-Chem1A/src/util/enumify.js"],"sourcesContent":["/*\n * MIT License\n *\n * Copyright (c) 2020 Axel Rauschmayer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\n/**\n * Modified to use jsdoc and prevent source-map issues\n */\nexport class Enumify {\n\n    //#################### Static\n\n    /**\n     * @type Array<string>\n     */\n    static enumKeys;\n    /**\n     * @type {Array<Enumify>}\n     */\n    static enumValues;\n\n    static closeEnum() {\n        /**\n         * @type {Array<string>}\n         */\n        const enumKeys = [];\n        /**\n         * @type {Array<Enumify>}\n         */\n        const enumValues = [];\n        // Traverse the enum entries\n        for (const [key, value] of Object.entries(this)) {\n            enumKeys.push(key);\n\n            value.enumKey = key;\n            value.enumOrdinal = enumValues.length;\n            enumValues.push(value);\n        }\n        // Important: only add more static properties *after* processing the enum entries\n        this.enumKeys = enumKeys;\n        this.enumValues = enumValues;\n        // TODO: prevent instantiation now. Freeze `this`?\n    }\n\n    /** Use case: parsing enum values\n     * @param {string} str\n     * @return { undefined | Enumify }\n     */\n    static enumValueOf(str) {\n        const index = this.enumKeys.indexOf(str);\n        if (index >= 0) {\n            return this.enumValues[index];\n        }\n        return undefined;\n    }\n\n    static [Symbol.iterator]() {\n        return this.enumValues[Symbol.iterator]();\n    }\n\n    //#################### Instance\n\n    /**\n     * @type {string}\n     */\n    enumKey;\n    /**\n     * @type {number}\n     */\n    enumOrdinal;\n\n    toString() {\n        return this.constructor.name + '.' + this.enumKey;\n    }\n}\n"],"mappings":"+ZAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,CAEA;AACA;AACA,GACA,UAAaA,QAAb,uIA+DI,mBAAW,CACP,MAAO,MAAKC,WAAL,CAAiBC,IAAjB,CAAwB,GAAxB,CAA8B,KAAKC,OAA1C,CACH,CAjEL,2BAEI;AAEA;AACJ;AACA,OANA,CAQI;AACJ;AACA,OAGI,oBAAmB,CACf;AACR;AACA,WACQ,GAAMC,SAAQ,CAAG,EAAjB,CACA;AACR;AACA,WACQ,GAAMC,WAAU,CAAG,EAAnB,CACA;AACA,6BAA2BC,MAAM,CAACC,OAAP,CAAe,IAAf,CAA3B,gCAAiD,CAA5C,6DAAOC,GAAP,uBAAYC,KAAZ,uBACDL,QAAQ,CAACM,IAAT,CAAcF,GAAd,EAEAC,KAAK,CAACN,OAAN,CAAgBK,GAAhB,CACAC,KAAK,CAACE,WAAN,CAAoBN,UAAU,CAACO,MAA/B,CACAP,UAAU,CAACK,IAAX,CAAgBD,KAAhB,EACH,CACD;AACA,KAAKL,QAAL,CAAgBA,QAAhB,CACA,KAAKC,UAAL,CAAkBA,UAAlB,CACA;AACH,CAED;AACJ;AACA;AACA,OAvCA,2BAwCI,qBAAmBQ,GAAnB,CAAwB,CACpB,GAAMC,MAAK,CAAG,KAAKV,QAAL,CAAcW,OAAd,CAAsBF,GAAtB,CAAd,CACA,GAAIC,KAAK,EAAI,CAAb,CAAgB,CACZ,MAAO,MAAKT,UAAL,CAAgBS,KAAhB,CAAP,CACH,CACD,MAAOE,UAAP,CACH,CA9CL,8BAgDI,gBAA2B,CACvB,MAAO,MAAKX,UAAL,CAAgBY,MAAM,CAACC,QAAvB,GAAP,CACH,CAED;AAEA;AACJ;AACA,OAxDA,qBAgDYD,MAAM,CAACC,QAhDnB"},"metadata":{},"sourceType":"module"}