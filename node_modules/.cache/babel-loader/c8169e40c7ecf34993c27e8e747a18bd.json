{"ast":null,"code":"import React from\"react\";import{InlineMath}from\"react-katex\";import{dynamicText}from\"../config/config.js\";import{variabilize,chooseVariables}from\"./variabilize.js\";import Spacer from\"@components/Spacer\";import ErrorBoundary from\"@components/ErrorBoundary\";import RenderMedia from\"@components/RenderMedia\";import{CONTENT_SOURCE}from\"@common/global-config\";/**\n * @param {string|*} text\n * @param problemID\n * @param {*} variabilization\n * @param context\n */import{jsx as _jsx}from\"react/jsx-runtime\";function renderText(text,problemID,variabilization,context){if(typeof text!==\"string\"){return text;}text=text.replaceAll(\"\\\\neq\",\"≠\");text=text.replaceAll(\"**\",\"^\");var result=text;result=parseForMetaVariables(result,context);for(var d in dynamicText){var replace=dynamicText[d];result=result.split(d).join(replace);// expands all \"%dynamic%\" text to their specific counterparts\n}if(variabilization){result=variabilize(result,variabilization);}var lines=result.split(\"\\\\n\");return lines.map(function(line,idx){/**\n         * If line has LaTeX, split by the \"&&\" delimiter to separate plain text from LaTeX\n         * @type {(string | JSX.Element)[]}\n         */var lineParts=line.split(\"$$\");lineParts=lineParts.map(function(part,jdx){var isLaTeX=jdx%2!==0;// implies it is in between two \"$$\" delimiters\nif(isLaTeX){var regex=/^_{3,}$/;if(regex.test(part)){return parseForFillInQuestions(part);}return/*#__PURE__*/_jsx(ErrorBoundary,{componentName:\"InlineMath\",replacement:part,inline:true,children:/*#__PURE__*/_jsx(InlineMath,{math:part,renderError:function renderError(error){throw error;}})},Math.random()*Math.pow(2,16));}var lineSubParts=part.split(\"##\");return lineSubParts.map(function(subPart,kdx){var isMedia=kdx%2!==0;if(isMedia){return/*#__PURE__*/_jsx(\"center\",{children:/*#__PURE__*/_jsx(RenderMedia,{url:subPart,problemID:problemID,contentSource:CONTENT_SOURCE})},Math.random()*Math.pow(2,16));}return parseForFillInQuestions(subPart);});});// add a spacer if it isn't the last line\nif(idx!==lines.length-1){lineParts.push(/*#__PURE__*/_jsx(Spacer,{height:2,width:2},Math.random()*Math.pow(2,16)));}return lineParts;});}/**\n * Renders the text generated from ChatGPT.\n * @param {string|*} text\n * @param problemID\n * @param {*} variabilization\n * @param context\n */function renderGPTText(text,problemID,variabilization,context){if(typeof text!==\"string\"){return text;}text=preprocessChatGPTResponse(text);text=text.replaceAll(\"\\\\neq\",\"≠\");text=text.replaceAll(\"**\",\"^\");var result=text;result=parseForMetaVariables(result,context);for(var d in dynamicText){var replace=dynamicText[d];result=result.split(d).join(replace);// expands all \"%dynamic%\" text to their specific counterparts\n}if(variabilization){result=variabilize(result,variabilization);}var lines=result.split(\"\\\\n\");lines=lines.map(function(line,idx){/**\n         * If line has LaTeX, split by the \"&&\" delimiter to separate plain text from LaTeX\n         * @type {(string | JSX.Element)[]}\n         */var lineParts=line.split(\"$$\");lineParts=lineParts.map(function(part,jdx){var isLaTeX=jdx%2!==0;// implies it is in between two \"$$\" delimiters\nif(isLaTeX){var regex=/^_{3,}$/;if(regex.test(part)){return parseForFillInQuestions(part);}return/*#__PURE__*/_jsx(ErrorBoundary,{componentName:\"InlineMath\",replacement:part,inline:true,children:/*#__PURE__*/_jsx(InlineMath,{math:part,renderError:function renderError(error){throw error;}})},Math.random()*Math.pow(2,16));}var lineSubParts=part.split(\"##\");return lineSubParts.map(function(subPart,kdx){var isMedia=kdx%2!==0;if(isMedia){return/*#__PURE__*/_jsx(\"center\",{children:/*#__PURE__*/_jsx(RenderMedia,{url:subPart,problemID:problemID,contentSource:CONTENT_SOURCE})},Math.random()*Math.pow(2,16));}return parseForFillInQuestions(subPart);});});// add a spacer if it isn't the last line\nif(idx!==lines.length-1){lineParts.push(/*#__PURE__*/_jsx(Spacer,{height:2,width:2},Math.random()*Math.pow(2,16)));}return lineParts;});return lines;}var META_REGEX=/%\\{([^{}%\"]+)}/g;var mapper={oats_user_id:function oats_user_id(context){return context.userID;}};/**\n * Takes in a string and iff there is a part that matches %{variable}, replace it with some context metadata\n * @param {string} str\n * @param context\n * @return {string}\n */function parseForMetaVariables(str,context){var _this=this;return str.replaceAll(META_REGEX,function(ogMatch,group1){if(group1 in mapper){return mapper[group1].call(_this,context);}return ogMatch;});}function preprocessChatGPTResponse(input){// Step 1: Replace ChatGPT '\\n' new lines with '\\\\n'\ninput=input.replace(/\\n/g,\"\\\\n\");// Step 2: Replace monetary values ($12,000) with (\\uFF04)12,000\nvar moneyRegex=/\\$(\\d{1,3}(,\\d{3})*(\\.\\d{2})?|(\\d+))/g;input=input.replace(moneyRegex,function(_,moneyValue){return\"\\uFF04\".concat(moneyValue);});// Step 3: Convert any remaining single dollar signs (not part of monetary values) to double dollars\ninput=input.replace(/(?<!\\$)\\$(?!\\$)/g,\"$$$$\");// Step 4: Replace all instances of \\uFF04 back to $\ninput=input.replace(/\\uFF04/g,\"$\");return input;}/**\n * Takes in a string and iff there is 3+ underscores in a row, convert it into a fill-in-the-blank box.\n * @param {(string)} str\n * @return {(string | JSX.Element)[]}\n */function parseForFillInQuestions(str){var strParts=str.split(/_{3,}/);var result=[];strParts.forEach(function(part,idx){if(idx>0){result.push(/*#__PURE__*/_jsx(\"span\",{\"aria-label\":\"fill in the blank\",style:{// TODO: choose between the following two styles\nmarginLeft:\"0.5ch\",marginRight:\"0.5ch\",paddingLeft:\"2.5ch\",paddingRight:\"2.5ch\",position:\"relative\",background:\"rgb(242,243,244)\",borderRadius:\"0.6ch\"},children:/*#__PURE__*/_jsx(\"div\",{style:{position:\"absolute\",bottom:3.5,left:4,right:4,height:1.5,borderRadius:\"0.6ch\",background:\"rgb(75,76,77)\"}})},Math.random()*Math.pow(2,16)));}result.push(part);});return result;}export{renderText,renderGPTText,chooseVariables};","map":{"version":3,"names":["React","InlineMath","dynamicText","variabilize","chooseVariables","Spacer","ErrorBoundary","RenderMedia","CONTENT_SOURCE","renderText","text","problemID","variabilization","context","replaceAll","result","parseForMetaVariables","d","replace","split","join","lines","map","line","idx","lineParts","part","jdx","isLaTeX","regex","test","parseForFillInQuestions","error","Math","random","lineSubParts","subPart","kdx","isMedia","length","push","renderGPTText","preprocessChatGPTResponse","META_REGEX","mapper","oats_user_id","userID","str","ogMatch","group1","call","input","moneyRegex","_","moneyValue","strParts","forEach","marginLeft","marginRight","paddingLeft","paddingRight","position","background","borderRadius","bottom","left","right","height"],"sources":["/Users/allisonwang/Downloads/chemistry/OATutor-Chem1A/src/platform-logic/renderText.js"],"sourcesContent":["import React from \"react\";\nimport { InlineMath } from \"react-katex\";\nimport { dynamicText } from \"../config/config.js\";\nimport { variabilize, chooseVariables } from \"./variabilize.js\";\nimport Spacer from \"@components/Spacer\";\nimport ErrorBoundary from \"@components/ErrorBoundary\";\nimport RenderMedia from \"@components/RenderMedia\";\nimport { CONTENT_SOURCE } from \"@common/global-config\";\n\n/**\n * @param {string|*} text\n * @param problemID\n * @param {*} variabilization\n * @param context\n */\nfunction renderText(text, problemID, variabilization, context) {\n    if (typeof text !== \"string\") {\n        return text;\n    }\n    text = text.replaceAll(\"\\\\neq\", \"≠\");\n    text = text.replaceAll(\"**\", \"^\");\n    let result = text;\n    result = parseForMetaVariables(result, context);\n\n    for (const d in dynamicText) {\n        const replace = dynamicText[d];\n        result = result.split(d).join(replace); // expands all \"%dynamic%\" text to their specific counterparts\n    }\n    if (variabilization) {\n        result = variabilize(result, variabilization);\n    }\n\n    const lines = result.split(\"\\\\n\");\n    return lines.map((line, idx) => {\n        /**\n         * If line has LaTeX, split by the \"&&\" delimiter to separate plain text from LaTeX\n         * @type {(string | JSX.Element)[]}\n         */\n        let lineParts = line.split(\"$$\");\n        lineParts = lineParts.map((part, jdx) => {\n            const isLaTeX = jdx % 2 !== 0; // implies it is in between two \"$$\" delimiters\n            if (isLaTeX) {\n                const regex = /^_{3,}$/;\n                if (regex.test(part)) {\n                    return parseForFillInQuestions(part);\n                }\n                return (\n                    <ErrorBoundary\n                        componentName={\"InlineMath\"}\n                        replacement={part}\n                        inline\n                        key={Math.random() * 2 ** 16}\n                    >\n                        <InlineMath\n                            math={part}\n                            renderError={(error) => {\n                                throw error;\n                            }}\n                        />\n                    </ErrorBoundary>\n                );\n            }\n\n            const lineSubParts = part.split(\"##\");\n            return lineSubParts.map((subPart, kdx) => {\n                const isMedia = kdx % 2 !== 0;\n                if (isMedia) {\n                    return (\n                        <center key={Math.random() * 2 ** 16}>\n                            <RenderMedia\n                                url={subPart}\n                                problemID={problemID}\n                                contentSource={CONTENT_SOURCE}\n                            />\n                        </center>\n                    );\n                }\n                return parseForFillInQuestions(subPart);\n            });\n        });\n        // add a spacer if it isn't the last line\n        if (idx !== lines.length - 1) {\n            lineParts.push(\n                <Spacer height={2} width={2} key={Math.random() * 2 ** 16} />\n            );\n        }\n        return lineParts;\n    });\n}\n\n/**\n * Renders the text generated from ChatGPT.\n * @param {string|*} text\n * @param problemID\n * @param {*} variabilization\n * @param context\n */\nfunction renderGPTText(text, problemID, variabilization, context) {\n    if (typeof text !== \"string\") {\n        return text;\n    }\n    text = preprocessChatGPTResponse(text);\n\n    text = text.replaceAll(\"\\\\neq\", \"≠\");\n    text = text.replaceAll(\"**\", \"^\");\n    let result = text;\n    result = parseForMetaVariables(result, context);\n\n    for (const d in dynamicText) {\n        const replace = dynamicText[d];\n        result = result.split(d).join(replace); // expands all \"%dynamic%\" text to their specific counterparts\n    }\n    if (variabilization) {\n        result = variabilize(result, variabilization);\n    }\n\n    let lines = result.split(\"\\\\n\");\n    lines = lines.map((line, idx) => {\n        /**\n         * If line has LaTeX, split by the \"&&\" delimiter to separate plain text from LaTeX\n         * @type {(string | JSX.Element)[]}\n         */\n        let lineParts = line.split(\"$$\");\n        lineParts = lineParts.map((part, jdx) => {\n            const isLaTeX = jdx % 2 !== 0; // implies it is in between two \"$$\" delimiters\n            if (isLaTeX) {\n                const regex = /^_{3,}$/;\n                if (regex.test(part)) {\n                    return parseForFillInQuestions(part);\n                }\n                return (\n                    <ErrorBoundary\n                        componentName={\"InlineMath\"}\n                        replacement={part}\n                        inline\n                        key={Math.random() * 2 ** 16}\n                    >\n                        <InlineMath\n                            math={part}\n                            renderError={(error) => {\n                                throw error;\n                            }}\n                        />\n                    </ErrorBoundary>\n                );\n            }\n\n            const lineSubParts = part.split(\"##\");\n            return lineSubParts.map((subPart, kdx) => {\n                const isMedia = kdx % 2 !== 0;\n                if (isMedia) {\n                    return (\n                        <center key={Math.random() * 2 ** 16}>\n                            <RenderMedia\n                                url={subPart}\n                                problemID={problemID}\n                                contentSource={CONTENT_SOURCE}\n                            />\n                        </center>\n                    );\n                }\n                return parseForFillInQuestions(subPart);\n            });\n        });\n\n        // add a spacer if it isn't the last line\n        if (idx !== lines.length - 1) {\n            lineParts.push(\n                <Spacer height={2} width={2} key={Math.random() * 2 ** 16} />\n            );\n        }\n        return lineParts;\n    });\n    return lines;\n}\n\nconst META_REGEX = /%\\{([^{}%\"]+)}/g;\nconst mapper = {\n    oats_user_id: (context) => context.userID,\n};\n/**\n * Takes in a string and iff there is a part that matches %{variable}, replace it with some context metadata\n * @param {string} str\n * @param context\n * @return {string}\n */\nfunction parseForMetaVariables(str, context) {\n    return str.replaceAll(META_REGEX, (ogMatch, group1) => {\n        if (group1 in mapper) {\n            return mapper[group1].call(this, context);\n        }\n        return ogMatch;\n    });\n}\n\nfunction preprocessChatGPTResponse(input) {\n    // Step 1: Replace ChatGPT '\\n' new lines with '\\\\n'\n    input = input.replace(/\\n/g, \"\\\\n\");\n    // Step 2: Replace monetary values ($12,000) with (\\uFF04)12,000\n    const moneyRegex = /\\$(\\d{1,3}(,\\d{3})*(\\.\\d{2})?|(\\d+))/g;\n    input = input.replace(moneyRegex, (_, moneyValue) => `\\uFF04${moneyValue}`);\n    // Step 3: Convert any remaining single dollar signs (not part of monetary values) to double dollars\n    input = input.replace(/(?<!\\$)\\$(?!\\$)/g, \"$$$$\");\n    // Step 4: Replace all instances of \\uFF04 back to $\n    input = input.replace(/\\uFF04/g, \"$\");\n    return input;\n}\n\n/**\n * Takes in a string and iff there is 3+ underscores in a row, convert it into a fill-in-the-blank box.\n * @param {(string)} str\n * @return {(string | JSX.Element)[]}\n */\nfunction parseForFillInQuestions(str) {\n    const strParts = str.split(/_{3,}/);\n    let result = [];\n    strParts.forEach((part, idx) => {\n        if (idx > 0) {\n            result.push(\n                <span\n                    key={Math.random() * 2 ** 16}\n                    aria-label={\"fill in the blank\"}\n                    style={{\n                        // TODO: choose between the following two styles\n                        marginLeft: \"0.5ch\",\n                        marginRight: \"0.5ch\",\n                        paddingLeft: \"2.5ch\",\n                        paddingRight: \"2.5ch\",\n                        position: \"relative\",\n                        background: \"rgb(242,243,244)\",\n                        borderRadius: \"0.6ch\",\n                    }}\n                >\n                    <div\n                        style={{\n                            position: \"absolute\",\n                            bottom: 3.5,\n                            left: 4,\n                            right: 4,\n                            height: 1.5,\n                            borderRadius: \"0.6ch\",\n                            background: \"rgb(75,76,77)\",\n                        }}\n                    />\n                </span>\n            );\n        }\n        result.push(part);\n    });\n    return result;\n}\n\nexport { renderText, renderGPTText, chooseVariables };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}